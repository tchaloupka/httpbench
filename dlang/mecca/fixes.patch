diff --git a/src/mecca/lib/exception.d b/src/mecca/lib/exception.d
index 70710e8..ce669d8 100644
--- a/src/mecca/lib/exception.d
+++ b/src/mecca/lib/exception.d
@@ -46,7 +46,7 @@ private __gshared static TypeInfo_Class defaultTraceTypeInfo;
 
 shared static this() {
     defaultTraceTypeInfo = typeid(cast(Object)defaultTraceHandler(null));
-    assert(defaultTraceTypeInfo.name == "core.runtime.defaultTraceHandler.DefaultTraceInfo", defaultTraceTypeInfo.name);
+    assert(defaultTraceTypeInfo.name == "core.runtime.DefaultTraceInfo", defaultTraceTypeInfo.name);
     assert(defaultTraceTypeInfo.initializer.length <= ExcBuf.MAX_TRACEBACK_SIZE);
     assert(DefaultTraceInfoABI.sizeof <= defaultTraceTypeInfo.initializer.length);
     version (unittest) {} else {
diff --git a/src/mecca/lib/memory.d b/src/mecca/lib/memory.d
index 2338d8b..67b8936 100644
--- a/src/mecca/lib/memory.d
+++ b/src/mecca/lib/memory.d
@@ -456,13 +456,25 @@ struct DRuntimeStackDescriptor {
     static if (__traits(hasMember, Thread, "_locks")) {
         pragma(mangle, "_D4core6thread6Thread6_locksG2G" ~ mangleSuffix) extern __gshared static
             void[__traits(classInstanceSize, Mutex)][2] _locks;
-        @notrace private Mutex _slock() nothrow @nogc {
+        @notrace private Mutex _rtslock() nothrow @nogc {
             return cast(Mutex)_locks[0].ptr;
         }
+    } else static if (__VERSION__ >= 2094) {
+        pragma(mangle,"_D4core6thread10threadbase10ThreadBase6_slockG" ~ mangleSuffix) extern __gshared static
+            void[__traits(classInstanceSize, Mutex)] _slock;
+        @notrace private Mutex _rtslock() nothrow @nogc {
+            return cast(Mutex)_slock.ptr;
+        }
+    } else static if (__VERSION__ >= 2089) {
+        pragma(mangle,"_D4core6thread8osthread6Thread6_slockG" ~ mangleSuffix) extern __gshared static
+            void[__traits(classInstanceSize, Mutex)] _slock;
+        @notrace private Mutex _rtslock() nothrow @nogc {
+            return cast(Mutex)_slock.ptr;
+        }
     } else {
         pragma(mangle,"_D4core6thread6Thread6_slockG72" ~ mangleSuffix) extern __gshared static
             void[__traits(classInstanceSize, Mutex)] _slock;
-        @notrace private Mutex _slock() nothrow @nogc {
+        @notrace private Mutex _rtslock() nothrow @nogc {
             return cast(Mutex)_slock.ptr;
         }
     }
@@ -470,13 +482,22 @@ struct DRuntimeStackDescriptor {
     static if (__VERSION__ < 2077) {
         pragma(mangle, "_D4core6thread6Thread7sm_cbegPS4core6thread6Thread7Context") extern __gshared static
                 DRuntimeStackDescriptor* sm_cbeg;
+    } else static if (__VERSION__ >= 2094) {
+        pragma(mangle, "_D4core6thread10threadbase10ThreadBase7sm_cbegPSQBuQBs7context12StackContext") extern __gshared static
+                DRuntimeStackDescriptor* sm_cbeg;
+    } else static if (__VERSION__ >= 2093) {
+        pragma(mangle, "_D4core6thread8osthread6Thread7sm_cbegPSQBmQBk7context12StackContext") extern __gshared static
+                DRuntimeStackDescriptor* sm_cbeg;
+    } else static if (__VERSION__ >= 2089) {
+        pragma(mangle, "_D4core6thread8osthread6Thread7sm_cbegPSQBmQBkQBgQBa7Context") extern __gshared static
+                DRuntimeStackDescriptor* sm_cbeg;
     } else {
         pragma(mangle, "_D4core6thread6Thread7sm_cbegPSQBdQBbQx7Context") extern __gshared static
                 DRuntimeStackDescriptor* sm_cbeg;
     }
 
     @notrace void add() nothrow @nogc {
-        auto slock = _slock();
+        auto slock = _rtslock();
         slock.lock_nothrow();
         scope(exit) slock.unlock_nothrow();
 
@@ -488,7 +509,7 @@ struct DRuntimeStackDescriptor {
     }
 
     @notrace void remove() nothrow @nogc {
-        auto slock = _slock();
+        auto slock = _rtslock();
         slock.lock_nothrow();
         scope(exit) slock.unlock_nothrow();
 
diff --git a/src/mecca/platform/os/linux/time.d b/src/mecca/platform/os/linux/time.d
index 341f361..4caf58c 100644
--- a/src/mecca/platform/os/linux/time.d
+++ b/src/mecca/platform/os/linux/time.d
@@ -68,7 +68,10 @@ struct Timer
         sev.sigev_notify = SIGEV_THREAD_ID;
         sev.sigev_signo = hangDetectorSig;
         sev.sigev_value.sival_ptr = &hangDetectorTimerId;
-        sev._sigev_un._tid = gettid();
+        static if (is(typeof(sev._sigev_un._tid)))
+            sev._sigev_un._tid = gettid();
+        else
+            sev._tid = gettid();
 
         errnoEnforceNGC(timer_create(CLOCK_MONOTONIC, &sev, &hangDetectorTimerId) == 0,
                 "timer_create for hang detector");
diff --git a/src/mecca/reactor/io/fd.d b/src/mecca/reactor/io/fd.d
index 2d668ca..3a41334 100644
--- a/src/mecca/reactor/io/fd.d
+++ b/src/mecca/reactor/io/fd.d
@@ -263,8 +263,10 @@ struct ConnectedSocket {
 
         if( reuseAddr ) {
             sock.setSockOpt( SOL_SOCKET, SO_REUSEADDR, 1 );
+            sock.setSockOpt( SOL_SOCKET, SO_REUSEPORT, 1 );
         }
 
+        sock.setNagle(true);
         sock.osCallErrno!(.bind)(&sa.base, sa.len);
         sock.osCallErrno!(.listen)(LISTEN_BACKLOG);
 
diff --git a/src/mecca/reactor/package.d b/src/mecca/reactor/package.d
index bcf99f1..d1ed6e1 100644
--- a/src/mecca/reactor/package.d
+++ b/src/mecca/reactor/package.d
@@ -145,8 +145,13 @@ align(1):
             params._stackDescriptor.tstack = fibril.rsp;
             params._stackDescriptor.add();
         } else {
-            import core.thread: Thread;
-            params.stackDescriptorPtr = cast(DRuntimeStackDescriptor*)accessMember!("m_curr")(Thread.getThis());
+            static if (__VERSION__ >= 2094) {
+                import core.thread.threadbase: ThreadBase;
+                params.stackDescriptorPtr = cast(DRuntimeStackDescriptor*)accessMember!("m_curr")(ThreadBase.getThis());
+            } else {
+                import core.thread: Thread;
+                params.stackDescriptorPtr = cast(DRuntimeStackDescriptor*)accessMember!("m_curr")(Thread.getThis());
+            }
             DBG_ASSERT!"MAIN not set on main fiber"( flag!"MAIN" );
         }
 
@@ -164,7 +169,6 @@ align(1):
 
     @notrace void switchTo(ReactorFiber* next) nothrow @trusted @nogc {
         pragma(inline, true);
-        import core.thread: Thread;
 
         DRuntimeStackDescriptor* currentSD = stackDescriptor;
         DRuntimeStackDescriptor* nextSD = next.stackDescriptor;
@@ -173,7 +177,13 @@ align(1):
 
         // Since druntime does not expose the interfaces needed for switching fibers, we need to hack around the
         // protection system to access Thread.m_curr, which is private.
-        DRuntimeStackDescriptor** threadCurrentSD = cast(DRuntimeStackDescriptor**)&accessMember!("m_curr")(Thread.getThis());
+        static if (__VERSION__ >= 2094) {
+            import core.thread.threadbase: ThreadBase;
+            DRuntimeStackDescriptor** threadCurrentSD = cast(DRuntimeStackDescriptor**)&accessMember!("m_curr")(ThreadBase.getThis());
+        } else {
+            import core.thread: Thread;
+            DRuntimeStackDescriptor** threadCurrentSD = cast(DRuntimeStackDescriptor**)&accessMember!("m_curr")(Thread.getThis());
+        }
         *threadCurrentSD = nextSD;
 
         fibril.switchTo(next.fibril, &currentSD.tstack);
